{"version":3,"sources":["sites/all/modules/gridstack_field/es6/gridstack_field.es6"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","$","Drupal","settings","_saveParagraphPosition","jsonData","_Drupal$settings","href","basePath","pathPrefix","post","JSON","stringify","ajax","url","type","dataType","data","success","behaviors","gridstackField","attach","context","$grid_container","$grid_items","jsonFieldData","$fieldGridstack","options","gridstack_field","gridstack","find","items","each","key","item","obj","x","y","width","height","delta","push","once","prepend","this","on","event","undefined","el","dataset","text","jQuery"],"mappings":"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","file":"../gridstack_field.min.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){\n\"use strict\";\n\n/**\n * @file\n * Provides GridStack loaders.\n */\n\n(function ($, Drupal, settings) {\n  'use strict';\n\n  /**\n   * Custom wrapper for grid library.\n   */\n  // class Grid {\n  //   constructor(selector = '.grid-stack') {\n  //     this.selector = selector;\n  //   }\n  //\n  //   setOptions(options) {\n  //     this.options = options;\n  //     return this;\n  //   }\n  //\n  //   applyListentrs() {\n  //\n  //   }\n  //\n  //   setup() {\n  //     $(this.selector).gridstack(this.options);\n  //   }\n  //\n  //   debug() {\n  //     console.log(this);\n  //   }\n  // }\n\n  /**\n   * Helper function.\n   *\n   * Add data to json field and send to drupal callback.\n   */\n\n  function _saveParagraphPosition(jsonData) {\n    var _Drupal$settings = Drupal.settings,\n        basePath = _Drupal$settings.basePath,\n        pathPrefix = _Drupal$settings.pathPrefix;\n\n    var href = \"\" + basePath + pathPrefix + \"grid_update\";\n    var post = \"grid_items=\" + JSON.stringify(jsonData);\n\n    // Send data to drupal side.\n    $.ajax({\n      url: href,\n      type: \"POST\",\n      dataType: 'json',\n      data: post,\n      success: function success(data) {}\n    });\n  }\n\n  // Global constants;\n  // let grid = new Grid('.form-item-grid');\n\n  /**\n   * Implements grid and backbone collections on node edit page.\n   */\n  Drupal.behaviors.gridstackField = {\n    attach: function attach(context, settings) {\n      var $fieldGridstack = $('.form-item-grid');\n      var options = {};\n      if (typeof settings.gridstack_field !== 'undefined') {\n        options = settings.gridstack_field.settings;\n        $fieldGridstack.gridstack(options);\n\n        // grid.setOptions(options);\n        // grid.setup();\n      }\n\n      // Fill in JSON field with parameters from grid items.\n      (function () {\n        var $grid_container = $('.form-item-grid');\n        var $new_element = $grid_container.find('.ajax-new-content');\n        var $grid_items = $grid_container.find('.grid-stack-item.ui-draggable.ui-resizable');\n        var jsonFieldData = {};\n        jsonFieldData.items = [];\n        jsonFieldData.settings = options;\n\n        // if ($new_element.length) {\n        // }\n\n        // Warm up cache on page load and add new items.\n        if ($grid_items.length) {\n          $grid_items.each(function (key, item) {\n            var obj = {\n              x: $(item).data('gs-x'),\n              y: $(item).data('gs-y'),\n              width: $(item).data('gs-width'),\n              height: $(item).data('gs-height'),\n              delta: $(item).data('delta')\n            };\n            jsonFieldData.items.push(obj);\n          });\n          _saveParagraphPosition(jsonFieldData);\n        }\n\n        $('.field-widget-paragraphs-gridstack').once('save-item', function () {\n          // Add custom element with value of item height.\n          $grid_items.each(function (key, item) {\n            var height = $(item).data('gs-height');\n            height = 'Height: ' + height * 50 + 'px';\n            $(item).find('.grid-stack-item-content').prepend('<div class=\"height-counter\">' + height + '</div>');\n          });\n\n          $(this).on('change', function (event, items) {\n            if (items != undefined) {\n              $(items).each(function (i) {\n                var obj = {\n                  x: this.x,\n                  y: this.y,\n                  width: this.width,\n                  height: this.height,\n                  delta: this.el[0].dataset.delta\n                };\n\n                if (jsonFieldData.length === 0 || items[i].el[0].dataset.delta === jsonFieldData.length) {\n                  jsonFieldData.items.push(obj);\n                } else {\n                  jsonFieldData.items[this.el[0].dataset.delta].x = this.x;\n                  jsonFieldData.items[this.el[0].dataset.delta].y = this.y;\n                  jsonFieldData.items[this.el[0].dataset.delta].width = this.width;\n                  jsonFieldData.items[this.el[0].dataset.delta].height = this.height;\n                }\n\n                // Update custom element with value of item height.\n                var height = this.height;\n                var $height_container = $(items[i].el[0]).find('.height-counter');\n                height = 'Height: ' + height * 50 + 'px';\n                $height_container.text(height);\n              });\n              _saveParagraphPosition(jsonFieldData);\n            }\n          });\n        });\n      })();\n    }\n  };\n})(jQuery, Drupal, Drupal.settings);\n\n},{}]},{},[1]);\n"]}