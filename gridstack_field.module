<?php

/**
 * @file
 * Contains main hook definitions for Gridstack_field module.
 */

// Include module files from /includes folder.
gridstack_field_include('api');

// Load all Field module hooks for Gridstack.
require_once 'field/gridstack_field.field.inc';

/**
 * Load file from /includes folder.
 */
function gridstack_field_include($file) {
  module_load_include('inc', 'gridstack_field', 'includes/gridstack_field.' . $file);
}

/**
 * Implements hook_help().
 */
function gridstack_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#gridstack_field':

      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function gridstack_field_menu() {
  $items = array();
  $items['grid_update'] = array(
    'page callback' => 'gridstack_grid_callback',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function gridstack_field_theme() {
  return array(
    'gridstack_field_field_multiple_value_form' => array(
      'render element' => 'element',
    ),
    'gridstack_field_items' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Returns HTML for an individual form element.
 *
 * Combine multiple values into a table with drag-n-drop reordering.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element representing the form element.
 *
 * @ingroup themeable
 */
function theme_gridstack_field_field_multiple_value_form($variables) {
  $element = $variables['element'];
  $output = '';
  $instance = $element['#instance'];
  $cached_data = cache_get('grid_items' . session_id());
  dsm($cached_data, '$cached_data');
  $columns = (!empty($cached_data)) ? 'width-' . $cached_data->data['settings']['width'] : '';

  if (!isset($instance['settings']['title'])) {
    $instance['settings']['title'] = PARAGRAPHS_DEFAULT_TITLE;
  }
  if (!isset($instance['settings']['title_multiple'])) {
    $instance['settings']['title_multiple'] = PARAGRAPHS_DEFAULT_TITLE_MULTIPLE;
  }

  $add_mode = (isset($instance['settings']['add_mode']) ? $instance['settings']['add_mode'] : PARAGRAPHS_DEFAULT_ADD_MODE);
  $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

  // Sort items according to '_weight' (needed when the form comes back after
  // preview or failed validation)
  $items = array();
  foreach (element_children($element) as $key) {
    if ($key === 'add_more') {
      $add_more_button = &$element[$key];
    }
    elseif ($key === 'add_more_type') {
      $add_more_button_type = &$element[$key];
    }
    else {
      if (!isset($element[$key]['#access']) || $element[$key]['#access']) {
        $items[] = &$element[$key];
      }
    }
  }
  usort($items, '_field_sort_items_value_helper');

  $output = '<div class="form-item form-item-grid grid-stack ' . $columns . '"">';
  // Add the items to grid.
  if (count($items)) {
    // Such as Paragraphs rebuild field structure every time when user
    // add, edit, or remove item we decided to use drupal cache as temporary
    // storage with grid parameters for using when field rebuilds.
    // If exist cache fill grid items parameters from grid.
    if (!empty($cached_data)) {
      $data = $cached_data->data['items'];
      foreach ($items as $key => $item) {
        // Find item with highest Y parameter.
        if (!isset($data[$key])) {
          $temporary_json_data = $data;
          usort($temporary_json_data, function($a, $b) {
//            if ($a['y'] == $b['y']) {
//              return 0;
//            }
//            return $a['y'] < $b['y'] ? 1 : -1;
            return $a['y'] == $b['y'] ? 0 : $a['y'] < $b['y'] ? 1 : -1;
          });
          $max_y = $temporary_json_data[0]['y'] + $temporary_json_data[0]['height'];
        }

        // Build grid with items.
        $output .= theme('container', array(
          'element' => array('#children' => '<div class="grid-stack-item-content">' . drupal_render($item) . '</div>',
            '#attributes' => array(
              'class' => array('grid-stack-item'),
              'data-gs-x' => isset($data[$key]) ? $data[$key]['x'] : 0,
              'data-gs-y' => isset($data[$key]) ? $data[$key]['y'] : isset($max_y) ? $max_y : 0,
              'data-gs-width' => isset($data[$key]) ? $data[$key]['width'] : 3,
              'data-gs-height' => isset($data[$key]) ? $data[$key]['height'] : 6,
              'data-delta' => $key,
            ))
        ));
      }
    }
    // Use data from JSON field for creating grid items.
    else {
      foreach ($items as $key => $item) {
        // Build grid with items.
        $output .= theme('container', array(
          'element' => array('#children' => '<div class="grid-stack-item-content">' . drupal_render($item) . '</div>',
            '#attributes' => array(
              'class' => array('grid-stack-item'),
              'data-gs-x' => isset($data[$key]) ? $data[$key]['x'] : 0,
              'data-gs-y' => isset($data[$key]) ? $data[$key]['y'] : 0,
              'data-gs-width' => isset($data[$key]) ? $data[$key]['width'] : 3,
              'data-gs-height' => isset($data[$key]) ? $data[$key]['height'] : 6,
              'data-delta' => $key,
            ))
        ));
      }
    }
  }
  else {
    $add_text = 'No @title_multiple added yet. Select a @title type and press the button below to add one.';
    if ($add_mode == 'button') {
      $add_text = 'No @title_multiple added yet. Select a @title type and press a button below to add one.';
    }
    $output .= '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>";
    $output .= '<p><em>' . t($add_text, array('@title_multiple' => t($instance['settings']['title_multiple']), '@title' => t($instance['settings']['title']))) . '</em></p>';
  }
  $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
  $output .= '</div>';
  $output .= '<div class="clearfix">' . drupal_render($add_more_button_type) . drupal_render($add_more_button) . '</div>';

  return $output;
}


/**
 * Returns HTML for an gridstack items.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element representing the form element.
 *
 * @ingroup themeable
 */
function theme_gridstack_field_items($variables) {
  $gridstack_setting = gridstack_field_load($variables['element']['#object']->nid);
  $element = $variables['element'];
  $columns = $gridstack_setting->data['settings']['width'];
  $output = '';

  drupal_add_library('gridstack_field', 'gridstack_view', FALSE);
  drupal_add_css(drupal_get_path('module', 'gridstack_field') . '/css/col-' . $columns . '.min.css');

  // Sort items according to '_weight' (needed when the form comes back after
  // preview or failed validation)
  $items = array();
  foreach (element_children($element) as $key) {
    if (!isset($element[$key]['#access']) || $element[$key]['#access']) {
      $items[] = &$element[$key];
    }
  }

  $output = '<div class="form-item form-item-grid grid-stack width-' . $columns . '">';
  // Add the items to grid.
  if (count($items)) {
    $gridstack_setting_data = $gridstack_setting->data['items'];
    foreach ($items as $key => $item) {
      // Build grid with items.
      $output .= theme('container', array(
        'element' => array('#children' => '<div class="grid-stack-item-content">' . drupal_render($item) . '</div>',
          '#attributes' => array(
            'class' => array('grid-stack-item'),
            'data-gs-x' => !empty($gridstack_setting_data[$key]['x']) ? $gridstack_setting_data[$key]['x'] : 0,
            'data-gs-y' => !empty($gridstack_setting_data[$key]['y']) ? $gridstack_setting_data[$key]['y'] : 0,
            'data-gs-width' => !empty($gridstack_setting_data[$key]['width']) ? $gridstack_setting_data[$key]['width'] : 3,
            'data-gs-height' => !empty($gridstack_setting_data[$key]['height']) ? $gridstack_setting_data[$key]['height'] : 6,
            'data-delta' => $key,
          ))
      ));
    }
  }
  else {
    $add_text = 'No @title_multiple added yet.';
    $output .= '<p><em>' . t($add_text) . '</em></p>';
  }
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_library().
 */
function gridstack_field_library() {
  $libraries = array();
  $libraries['gridstack'] = array(
    'title' => 'Gridtack library',
    'website' => 'http://gridstackjs.com/',
    'version' => '0.3.0',
    'js' => array(
      '//code.jquery.com/ui/1.12.1/jquery-ui.min.js' => array(
        'type' => 'external',
      ),
      '//cdn.jsdelivr.net/npm/lodash@4.17.5/lodash.min.js' => array(
        'type' => 'external',
      ),
      '//cdnjs.cloudflare.com/ajax/libs/gridstack.js/0.3.0/gridstack.min.js' => array(
        'type' => 'external',
      ),
      '//cdnjs.cloudflare.com/ajax/libs/gridstack.js/0.3.0/gridstack.jQueryUI.min.js' => array(
        'type' => 'external',
      ),
      drupal_get_path('module', 'gridstack_field') . '/js/gridstack_field.min.js' => array('type' => 'file','scope' => 'footer'),
    ),
    'css' => array(
      '//cdnjs.cloudflare.com/ajax/libs/gridstack.js/0.3.0/gridstack.min.css' => array(
        'type' => 'external',
      ),
      drupal_get_path('module', 'gridstack_field') . '/css/gridstack_field.min.css' => array(),
    ),
  );
  $libraries['gridstack_view'] = array(
    'title' => 'Gridtack library for view page',
    'website' => 'http://gridstackjs.com/',
    'version' => '0.3.0',
    'js' => array(
      '//cdn.jsdelivr.net/npm/lodash@4.17.5/lodash.min.js' => array(
        'type' => 'external',
      ),
      drupal_get_path('module', 'gridstack_field') . '/js/gridstack_field_view.min.js' => array(),
    ),
    'css' => array(
      '//cdnjs.cloudflare.com/ajax/libs/gridstack.js/0.3.0/gridstack.min.css' => array(
        'type' => 'external',
      ),
    ),
  );

  return $libraries;
}

/**
 * Callback function for saving JSON with grid parameters into drupal
 * cache storage.
 *
 * Such us Paragraphs rebuild field structure every time when user
 * add, edit, or remove item we decided to use drupal ccache as temporary
 * storage with grid parameters for using when field rebuilds.
 */
function gridstack_grid_callback() {
  if (!empty($_POST['grid_items'])) {
    $data = drupal_json_decode($_POST['grid_items']);
    cache_set('grid_items' . session_id(), $data, 'cache_gridstack_field', CACHE_PERMANENT);
  }
}

/**
 * Implements hook_node_insert().
 * @TODO need to check node type.
 */
function gridstack_field_node_insert($node) {
  $cached_data = cache_get('grid_items' . session_id());
  if ($cached_data) {
    gridstack_field_save($node->nid, $cached_data->data);
    cache_clear_all('grid_items' . session_id(), 'cache_gridstack_field', FALSE);
  }
}

// Debugs.
//function gridstack_field_init() {
//  $cached_data = cache_get('grid_items' . session_id());
//  dsm($cached_data, 'CACHE');
//}

/**
 * Implements hook_flush_caches().
 */
function gridstack_field_flush_caches() {
  return array('cache_gridstack_field');
}
